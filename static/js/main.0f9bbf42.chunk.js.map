{"version":3,"sources":["pages/Footer.js","services/axios.js","assets/images/01d.gif","assets/images/01n.gif","assets/images/02d.gif","assets/images/02n.gif","assets/images/03.gif","assets/images/09.gif","assets/images/11.gif","assets/images/13.gif","constants/types.js","assets/images/myLocation.png","pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","Footer","year","Date","getFullYear","href","target","rel","style","marginRight","getWeather","lat","lng","a","axios","get","params","lon","appid","process","lang","units","res","data","getAddress","day","getHours","types","200","thunderstormD","201","202","210","211","212","221","230","231","232","300","showerRainD","301","302","310","312","313","314","321","500","rainD","501","502","503","504","511","snowD","520","521","522","531","600","601","602","611","612","613","615","616","620","621","622","701","mistD","711","721","731","741","751","761","762","771","781","800","clearSkyD","clearSkyN","801","fewCloudsD","fewCloudsN","802","scatteredClouds","803","brokenClouds","804","Section","Imagem","MapsPoints","Maps","Locate","panTo","className","onClick","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","src","MyLocal","alt","Search","usePlacesAutocomplete","requestOptions","location","radius","ready","value","suggestions","status","setValue","clearSuggestions","handleSelect","address","getGeocode","results","getLatLng","console","log","onSelect","onChange","e","disabled","placeholder","map","id","description","Home","useState","setLocation","myLocation","setMyLocation","weather","setWeather","setAddress","option","setOption","checked","stateMap","setStateMap","zero","x","setInterval","novaHora","hora","minuto","getMinutes","segundo","getSeconds","document","getElementById","textContent","error","center","useLoadScript","googleMapsApiKey","libraries","mapRef","React","useRef","onMapLoad","useCallback","current","setZoom","then","doc","main","formatted_address","getNewLocation","window","scrollTo","useEffect","marginTop","Button","variant","color","startIcon","reload","temp","temp_max","temp_min","pressure","humidity","FormControlLabel","control","Switch","event","name","label","labelPlacement","mapContainerStyle","height","width","zoom","options","disableDefaultUI","zoomControl","onLoad","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0f9bbf42.chunk.js","sourcesContent":["import React from \"react\";\n\nimport styled from \"styled-components\";\nimport ImportantDevicesIcon from \"@material-ui/icons/ImportantDevices\";\n\n//Estilização com Styled Component\nconst Container = styled.div`\n  color: #fff;\n  text-align: center;\n  font-style: italic;\n  margin-top: 40px;\n  margin-bottom: 30px;\n`;\n\nfunction Footer() {\n  //Pegando o ano em que estamos\n  const year = new Date().getFullYear();\n  return (\n    <Container>\n      {/* Link para meu Portfólio */}\n      <a\n        href=\"https://alexjou.github.io/meu-portfolio/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        style={{ marginRight: \"20px\" }}\n      >\n        <ImportantDevicesIcon /> Meu Portfólio\n      </a>\n\n      <span>• Álex Joubert • {year}</span>\n    </Container>\n  );\n}\n\nexport default Footer;\n","import axios from \"axios\";\n\n//Busca na api do openweathermap os dados meteorólogicos, de acordo com as coordenadas enviadas\nexport const getWeather = async (lat, lng) => {\n  let res = await axios.get(\"http://api.openweathermap.org/data/2.5/weather\", {\n    params: {\n      lat: lat,\n      lon: lng,\n      appid: process.env.REACT_APP_OPEN_WHEATHER_KEY,\n      lang: \"pt\",\n      units: \"metric\",\n    },\n  });\n  return res.data;\n};\n\n//Busca na api do google o endereço, de acordo com as coordenadas enviadas\nexport const getAddress = async (lat, lng) => {\n  let res = axios.get(\n    \"https://maps.googleapis.com/maps/api/geocode/json?address=\" +\n      lat +\n      \",\" +\n      lng +\n      \"&key=AIzaSyCdVpLGWsO8ElUDwjjKRJtsqs01QynqPXs\"\n  );\n  return res;\n};\n","export default __webpack_public_path__ + \"static/media/01d.622b46c0.gif\";","export default __webpack_public_path__ + \"static/media/01n.4098fe40.gif\";","export default __webpack_public_path__ + \"static/media/02d.852432d9.gif\";","export default __webpack_public_path__ + \"static/media/02n.f1f184e1.gif\";","export default __webpack_public_path__ + \"static/media/03.ef50f9fa.gif\";","export default __webpack_public_path__ + \"static/media/09.084016b4.gif\";","export default __webpack_public_path__ + \"static/media/11.5d0353a2.gif\";","export default __webpack_public_path__ + \"static/media/13.f0521d34.gif\";","import clearSkyD from \"../assets/images/01d.gif\";\nimport clearSkyN from \"../assets/images/01n.gif\";\nimport fewCloudsD from \"../assets/images/02d.gif\";\nimport fewCloudsN from \"../assets/images/02n.gif\";\nimport scatteredClouds from \"../assets/images/03.gif\";\nimport brokenClouds from \"../assets/images/03.gif\";\nimport showerRainD from \"../assets/images/09.gif\";\nimport rainD from \"../assets/images/02d.gif\";\nimport thunderstormD from \"../assets/images/11.gif\";\nimport snowD from \"../assets/images/13.gif\";\nimport mistD from \"../assets/images/02d.gif\";\n\n//Gifs para mostrar na tela de acordo com o tempo meteorológico\n\nvar data = new Date();\nvar day = data.getHours();\n\nconst types = {\n  200: thunderstormD,\n  201: thunderstormD,\n  202: thunderstormD,\n  210: thunderstormD,\n  211: thunderstormD,\n  212: thunderstormD,\n  221: thunderstormD,\n  230: thunderstormD,\n  231: thunderstormD,\n  232: thunderstormD,\n\n  300: showerRainD,\n  301: showerRainD,\n  302: showerRainD,\n  310: showerRainD,\n  312: showerRainD,\n  313: showerRainD,\n  314: showerRainD,\n  321: showerRainD,\n\n  500: rainD,\n  501: rainD,\n  502: rainD,\n  503: rainD,\n  504: rainD,\n  511: snowD,\n  520: thunderstormD,\n  521: thunderstormD,\n  522: thunderstormD,\n  531: thunderstormD,\n\n  600: snowD,\n  601: snowD,\n  602: snowD,\n  611: snowD,\n  612: snowD,\n  613: snowD,\n  615: snowD,\n  616: snowD,\n  620: snowD,\n  621: snowD,\n  622: snowD,\n\n  701: mistD,\n  711: mistD,\n  721: mistD,\n  731: mistD,\n  741: mistD,\n  751: mistD,\n  761: mistD,\n  762: mistD,\n  771: mistD,\n  781: mistD,\n\n  800: day > 5 && day < 18 ? clearSkyD : clearSkyN,\n  801: day > 5 && day < 18 ? fewCloudsD : fewCloudsN,\n  802: scatteredClouds,\n  803: brokenClouds,\n  804: brokenClouds,\n};\n\nexport default types;\n","export default __webpack_public_path__ + \"static/media/myLocation.b6130726.png\";","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport { getAddress, getWeather } from \"../services/axios\";\nimport types from \"../constants/types\";\nimport Button from \"@material-ui/core/Button\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport styled from \"styled-components\";\nimport { FormControlLabel, Switch } from \"@material-ui/core\";\nimport MyLocal from \"../assets/images/myLocation.png\";\n\n//Mapa\nimport { GoogleMap, useLoadScript } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\n\nimport \"@reach/combobox/styles.css\";\n//Mapa\n\n//Estilização com Styled Component\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  h1 {\n    color: #fff;\n    font-size: 45px;\n  }\n`;\n\nconst Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: #fff;\n  width: 50%;\n  padding: 2%;\n  margin-top: 2%;\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.363);\n  font-family: \"Ubuntu\";\n  font-size: 18px;\n\n  p {\n    font-weight: bold;\n\n    @media (max-width: 768px) {\n      padding: 5%;\n    }\n  }\n\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\nconst Imagem = styled.div`\n  display: flex;\n  justify-content: center;\n\n  img {\n    width: 80%;\n  }\n`;\nconst MapsPoints = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Maps = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  p {\n    font-size: 16px;\n    font-weight: normal;\n  }\n  .search {\n    width: 100%;\n    max-width: 50%;\n    display: flex;\n    justify-content: center;\n    margin-right: 20px;\n    margin-bottom: 10px;\n  }\n\n  .search input {\n    padding: 0.5rem;\n    font-size: 1.5rem;\n    width: 100%;\n\n    @media (max-width: 768px) {\n      font-size: 1rem;\n    }\n  }\n\n  .locate {\n    background: none;\n    border: none;\n  }\n  .locate img {\n    width: 45px;\n    cursor: pointer;\n    margin: 20%;\n  }\n`;\n\nfunction Home() {\n  const [location, setLocation] = useState(false);\n  const [myLocation, setMyLocation] = useState(\"\");\n  const [weather, setWeather] = useState(false);\n  const [address, setAddress] = useState(false);\n  const [option, setOption] = useState(false);\n  const [stateMap, setStateMap] = useState({\n    checked: false,\n  });\n\n  const handleChange = (event) => {\n    setStateMap({ ...stateMap, [event.target.name]: event.target.checked });\n  };\n\n  //Relógio\n  setInterval(function () {\n    try {\n      let novaHora = new Date();\n      let hora = novaHora.getHours();\n      let minuto = novaHora.getMinutes();\n      let segundo = novaHora.getSeconds();\n      minuto = zero(minuto);\n      segundo = zero(segundo);\n      document.getElementById(\"hora\").textContent =\n        hora + \":\" + minuto + \":\" + segundo;\n    } catch (error) {\n      console.log(error);\n    }\n  }, 1000);\n  function zero(x) {\n    if (x < 10) {\n      x = \"0\" + x;\n    }\n    return x;\n  }\n\n  //Mapa\n  const libraries = [\"places\"];\n  const mapContainerStyle = {\n    height: \"50vh\",\n    width: \"50vw\",\n  };\n  const options = {\n    disableDefaultUI: true,\n    zoomControl: true,\n  };\n  const center = {\n    lat: myLocation.latitude,\n    lng: myLocation.longitude,\n  };\n  useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries,\n  });\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(14);\n    getNewLocation(lat, lng);\n    window.scrollTo(0, 100);\n  }, []);\n  //Mapa\n\n  function getNewLocation(lat, lng) {\n    getWeather(lat, lng).then((doc) => {\n      setWeather(doc.weather[0]);\n      setOption(doc.main);\n    });\n\n    getAddress(lat, lng).then((data) =>\n      setAddress(data.data.results[0].formatted_address)\n    );\n  }\n\n  useEffect(() => {\n    //Pegando a localização atual\n    navigator.geolocation.getCurrentPosition((position) => {\n      //Confirmando que sua localização foi pega\n      setLocation(true);\n      setMyLocation(position?.coords);\n\n      //Pegando os dados meteorólogicos da sua coordenada\n      getWeather(position?.coords.latitude, position?.coords.longitude).then(\n        (doc) => {\n          setWeather(doc.weather[0]);\n          setOption(doc.main);\n        }\n      );\n\n      //Pegando seu endereço com as coordenadas\n      getAddress(\n        position?.coords.latitude,\n        position?.coords.longitude\n      ).then((data) => setAddress(data.data.results[0].formatted_address));\n    });\n  }, []);\n\n  return (\n    <Container>\n      <h1>Climão </h1>\n\n      {/* Se tiver a localização e os dados meteorológicos mostra essa Section */}\n      {location && weather ? (\n        <Section>\n          <h2>Como está o tempo? {weather.description}!</h2>\n          <Imagem>\n            <img src={types[weather.id]} alt=\"weather\" />\n          </Imagem>\n\n          {/* Mostrar a hora do relógio na tela */}\n          <h2 id=\"hora\">.</h2>\n          <h5 style={{ marginTop: \"-2%\" }}>Hora local</h5>\n\n          <p>Seu endereço: {address}</p>\n\n          {/* Botão para dar um refresh na página */}\n          <Button\n            variant=\"contained\"\n            color=\"default\"\n            startIcon={<RefreshIcon />}\n            onClick={() => window.location.reload()}\n          >\n            Atualizar\n          </Button>\n          <ul>\n            <li>Temperatura atual: {option.temp}°</li>\n            <li>Temperatura máxima: {option.temp_max}°</li>\n            <li>Temperatura minima: {option.temp_min}°</li>\n            <li>Pressão: {option.pressure} hpa</li>\n            <li>Humidade: {option.humidity}%</li>\n          </ul>\n\n          <FormControlLabel\n            value=\"start\"\n            control={\n              <Switch\n                checked={stateMap.checked}\n                onChange={handleChange}\n                name=\"checked\"\n                color=\"primary\"\n              />\n            }\n            label=\"Quer ver a meteorologia de outro lugar?\"\n            labelPlacement=\"start\"\n          />\n\n          {stateMap.checked && (\n            <Maps>\n              <MapsPoints>\n                <Search panTo={panTo} />\n                <Locate panTo={panTo} />\n              </MapsPoints>\n\n              <GoogleMap\n                id=\"map\"\n                mapContainerStyle={mapContainerStyle}\n                zoom={8}\n                center={center}\n                options={options}\n                onLoad={onMapLoad}\n              ></GoogleMap>\n            </Maps>\n          )}\n        </Section>\n      ) : (\n        // Essa Section só mostra se não tiver a localização ou o endereço\n        <Section>\n          <h3>Aceite a permissão para verificar a meteorologia </h3>\n          <Button\n            variant=\"contained\"\n            color=\"default\"\n            startIcon={<RefreshIcon />}\n            onClick={() => window.location.reload()}\n          >\n            Atualizar\n          </Button>\n        </Section>\n      )}\n    </Container>\n  );\n}\n\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null\n        );\n      }}\n    >\n      <img src={MyLocal} alt=\"location\" />\n    </button>\n  );\n}\n\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 43.6532, lng: () => -79.3832 },\n      radius: 100 * 1000,\n    },\n  });\n\n  const handleInput = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async (address) => {\n    setValue(address, false);\n    clearSuggestions();\n\n    try {\n      const results = await getGeocode({ address });\n      const { lat, lng } = await getLatLng(results[0]);\n      panTo({ lat, lng });\n    } catch (error) {\n      console.log(\"😱 Error: \", error);\n    }\n  };\n\n  return (\n    <div className=\"search\">\n      <Combobox onSelect={handleSelect}>\n        <ComboboxInput\n          value={value}\n          onChange={handleInput}\n          disabled={!ready}\n          placeholder=\"Procure um local\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport Footer from \"./pages/Footer\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <>\n      {/* Componentes renderizados */}\n      <Home />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}